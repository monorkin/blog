<%
  dimensions = local_assigns[:in_gallery] ? [ 800, 600 ] : [ 1024, 768 ]
  classes = %w[attachment]
  data = {}

  classes << "attachment--#{blob.representable? ? "preview" : "file"}"
  classes << "attachment--#{blob.filename.extension}"

  if blob.image? && blob.representable?
    classes << "cursor-zoom-in"
    data[:action] ||= ""
    data[:action] += " click->enlarge-image#enlarge"
    data[:controller] ||= ""
    data[:controller] += "enlarge-image"
    data[:enlarge_image_url_value] = blob.url
  end
%>

<%= content_tag(:figure, class: classes, data: data) do %>
  <% if blob.video? %>
    <% poster = blob.representable? ? url_for(blob.representation(resize_to_limit: dimensions)) : false %>
    <% options = { controls: true, autoplay: "autoplay", loop: true, muted: true, loading: "lazy" } %>
    <% options.merge!(poster: url_for(poster), poster_skip_pipeline: true) if poster %>

    <%= video_tag([url_for(blob)], options) %>
  <% elsif blob.audio? %>
    <%= audio_tag([url_for(blob)], autoplay: false, controls: true) %>
  <% elsif blob.content_type == "application/pdf" %>
    <%= content_tag(:embed, src: rails_blob_url(blob), width: 800, height: 500, type: "application/pdf") %>
  <% elsif blob.representable? %>
    <% if blob.filename.extension == "gif" %>
      <%= image_tag url_for(blob), loading: "lazy" %>
    <% else %>
      <% width, height = blob.metadata.values_at("width", "height") %>
      <% style = (width && height) ? "aspect-ratio: #{width} / #{height};" : nil %>

      <%= image_tag blob.representation(resize_to_limit: dimensions), loading: "lazy", style: style %>
    <% end %>
  <% else %>
    <%= link_to blob.filename, url_for(blob), download: true %>
  <% end %>

  <figcaption class="attachment__caption">
    <% if caption = blob.try(:caption) %>
      <%= caption %>
    <% else %>
      <span class="attachment__name"><%= blob.filename %></span>
      <span class="attachment__size"><%= number_to_human_size blob.byte_size %></span>
    <% end %>
  </figcaption>
<% end %>
